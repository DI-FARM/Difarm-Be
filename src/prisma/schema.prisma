generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String?  @unique
  phone     String?  @unique
  role      Roles    @default(ADMIN)
  password  String?
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  users     User?
}

model User {
  id         String   @id @default(uuid())
  accountId  String   @unique
  fullname   String
  gender     Gender?
  profilePic String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  farms      Farm[]   @relation("UserFarms")
  account    Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
}

model Farm {
  id                     String                  @id @default(uuid())
  name                   String                  @unique
  location               String
  size                   Float
  type                   String
  ownerId                String
  status                 Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt
  managerId              String?
  cattle                 Cattle[]                @relation("FarmToCattle")
  owner                  User                    @relation("UserFarms", fields: [ownerId], references: [id])
  productions            Production[]
  productionTotals       ProductionTotals[]
  productionTransactions ProductionTransaction[]
  stocks                 Stock[]
  transactions           Transaction[]
  wasteLogs              WastesLog[]
  inseminations          Insemination[]
  vaccinations           Vaccination[]
  veterinarians          Veterinarian[]

  @@index([ownerId])
}

model Cattle {
  id              String         @id @default(uuid())
  tagNumber       String         @unique
  breed           String
  gender          String
  DOB             DateTime?
  weight          Float
  status          CattleStatus   @default(HEALTHY)
  location        String?
  birthOrigin     BirthOrign?
  motherId        String?
  farmId          String
  lastCheckupDate DateTime?
  vaccineHistory  String?
  purchaseDate    DateTime?
  previousOwner   String?
  price           Float?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  farm            Farm           @relation("FarmToCattle", fields: [farmId], references: [id])
  mother          Cattle?  @relation("MotherChild", fields: [motherId], references: [id])

  productions     Production[]
  inseminations   Insemination[]
  vaccinations    Vaccination[]
  children        Cattle[] @relation("MotherChild")

  @@index([farmId])
}

enum BirthOrign {
  OnFarm
  Purchased
}

model Production {
  id             String    @id @default(uuid())
  farmId         String
  cattleId       String
  productName    String
  quantity       Int
  productionDate DateTime
  expirationDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  cattle         Cattle    @relation(fields: [cattleId], references: [id])
  farm           Farm      @relation(fields: [farmId], references: [id])

  @@index([farmId])
  @@index([cattleId])
}

model ProductionTransaction {
  id          String      @id @default(uuid())
  farmId      String
  productType ProductType
  total       Float
  quantity    Float
  value       Float
  date        DateTime    @default(now())
  consumer    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  farm        Farm        @relation(fields: [farmId], references: [id])

  @@index([farmId])
}

model ProductionTotals {
  id            String      @id @default(uuid())
  farmId        String
  productType   ProductType
  totalQuantity Float       @default(0.0)
  pricePerUnit  Float       @default(0.0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  farm          Farm        @relation(fields: [farmId], references: [id])

  @@unique([farmId, productType])
}

model WastesLog {
  id        String    @id @default(uuid())
  farmId    String
  type      WasteType
  quantity  Int
  date      DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  farm      Farm      @relation(fields: [farmId], references: [id])

  @@index([farmId])
}

model Stock {
  id           String        @id @default(uuid())
  name         String        @unique
  quantity     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  farmId       String
  type         StockType
  farm         Farm          @relation(fields: [farmId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id       String          @id @default(uuid())
  stockId  String
  quantity Int
  type     TransactionType
  date     DateTime        @default(now())
  farmId   String
  farm     Farm            @relation(fields: [farmId], references: [id])
  stock    Stock           @relation(fields: [stockId], references: [id])

  @@index([stockId])
  @@index([farmId])
}

model Vaccination {
  id           String        @id @default(uuid())
  cattleId     String
  date         DateTime      @default(now())
  vaccineType  String
  price       Float?        @default(0.0)      
  vetId        String?
  farmId       String?       @default(uuid())
  cattle       Cattle        @relation(fields: [cattleId], references: [id])
  farm         Farm?         @relation(fields: [farmId], references: [id])
  veterinarian Veterinarian? @relation(fields: [vetId], references: [id])

  @@index([cattleId])
  @@index([vetId])
  @@index([farmId])
  @@map("vaccinations")
}

model Veterinarian {
  id            String         @id @default(uuid())
  name          String
  phone         String
  email         String         @unique
  farmId        String?        @default(uuid())
  inseminations Insemination[]
  vaccinations  Vaccination[]
  farm          Farm?          @relation(fields: [farmId], references: [id])

  @@index([farmId])
  @@map("veterinarians")
}

model Insemination {
  id           String        @id @default(uuid())
  cattleId     String
  date         DateTime      @default(now())
  method       String
  vetId        String?
  type         String
  farmId       String?       @default(uuid())
  cattle       Cattle        @relation(fields: [cattleId], references: [id])
  farm         Farm?         @relation(fields: [farmId], references: [id])
  veterinarian Veterinarian? @relation(fields: [vetId], references: [id])

  @@index([cattleId])
  @@index([vetId])
  @@index([farmId])
  @@map("inseminations")
}

enum Roles {
  SUPERADMIN
  ADMIN
  MANAGER
}

enum Gender {
  MALE
  FEMALE
}

enum CattleStatus {
  HEALTHY
  SICK
  SOLD
  PROCESSED
}

enum ProductType {
  MILK
  MEAT
  DUNG
  LIQUIDMANURE
}

enum WasteType {
  DUNG
  LIQUIDMANURE
}

enum StockType {
  FOOD
  MEDICATION
  CONSTRUCTION
  WATER
  FEED_ACCESSORIES
  HYGIENE_MATERIALS
}

enum TransactionType {
  ADDITION
  CONSUME
}
