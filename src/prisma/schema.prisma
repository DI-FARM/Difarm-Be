// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String?  @unique
  phone     String?  @unique
  role      Roles    @default(ADMIN)
  password  String?
  status    Boolean  @default(true)

  users     User[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
}

enum Roles {
  SUPERADMIN
  ADMIN
  MANAGER
}

model User {
  id          String   @id @default(uuid())
  accountId   String   @unique
  fullname    String
  gender      Gender?
  profilePic  String?
  
  farms       Farm[]   @relation("UserFarms")

  account        Account     @relation(fields: [accountId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())

  @@index([accountId])
}

enum Gender {
  MALE
  FEMALE
}

model Farm {
  id          String   @id @default(uuid()) 
  name        String   @unique 
  location    String   
  size        Float    // Size of the farm in acres or hectares
  type        String   // Type of farm (e.g., crop, livestock, mixed)
  ownerId     String   
  status      Boolean  @default(true)   

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  owner       User     @relation("UserFarms", fields: [ownerId], references: [id])
  cattle      Cattle[] @relation("FarmToCattle")

  productions Production[]

  stocks      Stock[]
  transactions Transaction[]

  @@index([ownerId])
}



model Cattle {
  id               String       @id @default(uuid())
  tagNumber        String       @unique
  breed            String
  gender           String
  DOB              DateTime?
  weight           Float
  status           CattleStatus  @default(HEALTHY)
  location         String?
  farmId           String
  lastCheckupDate  DateTime?
  vaccineHistory   String?
  purchaseDate     DateTime?
  price            Float?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  farm             Farm         @relation("FarmToCattle", fields: [farmId], references: [id])

  productions      Production[]

  @@index([farmId])
}

enum CattleStatus {
  HEALTHY
  SICK
  SOLD
}

model Production {
  id              String   @id @default(uuid())
  farmId          String
  cattleId        String
  productName     String
  quantity        Int
  productionDate  DateTime
  expirationDate  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  farm            Farm     @relation(fields: [farmId], references: [id])
  cattle          Cattle   @relation(fields: [cattleId], references: [id])

  @@index([farmId])
  @@index([cattleId])
}

model Stock {
  id          String     @id @default(uuid())
  name        String     @unique
  quantity    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  farmId      String
  farm        Farm       @relation(fields: [farmId], references: [id])

  transactions Transaction[]
}

model Transaction {
  id          String   @id @default(uuid())
  stockId     String
  stock       Stock    @relation(fields: [stockId], references: [id])
  quantity    Int
  type        TransactionType
  date        DateTime @default(now())
  farmId      String
  farm        Farm     @relation(fields: [farmId], references: [id])

  @@index([stockId])
  @@index([farmId])
}

enum TransactionType {
  ADDITION
  CONSUME
}

